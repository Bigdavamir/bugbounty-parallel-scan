name: "XSS Summary Generation"

on:
  workflow_dispatch:
    inputs:
      domain:
        description: 'Target domain'
        required: true
        default: 'example.com'
      headers:
        description: 'Custom headers (optional)'
        required: false

jobs:
  final-summary:
    # This job depends on all the tool jobs defined in xss-tools.yaml
    # Make sure the job IDs match the ones in xss-tools.yaml
    needs: [httpx-scan, x8-scan, kxss-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Download all tool results
        uses: actions/download-artifact@v4
        with:
          pattern: "*" # Downloads all artifacts from previous jobs
          merge-multiple: true

      - name: Generate final summary
        run: |
          DOMAIN="${{ inputs.domain }}"

          # Combine all results similar to the original xss.yaml
          find . -name "httpx-results-*" -type d -exec cat {}/*.txt \; > httpx.txt || true
          find . -name "httpx-results-*" -type d -exec grep '?' {}/*.txt \; > dynamic-httpx.txt || true
          find . -name "x8-results-*" -type d -exec cat {}/*.txt \; > x8-brute.txt || true
          find . -name "kxss-results-*" -type d -exec cat {}/*.txt \; > kxss-out.txt || true

          # Parse kxss output for reflected pairs
          awk '
          /^URL: .* Param: .* Unfiltered: / {
            url_start = index($0, "URL: ") + 5
            param_pos = index($0, " Param: ")
            url = substr($0, url_start, param_pos - url_start)
            param_start = param_pos + 8
            unfilt_pos = index($0, " Unfiltered: ")
            param = substr($0, param_start, unfilt_pos - param_start)
            unfilt_start = unfilt_pos + 13
            unfiltered = substr($0, unfilt_start)
            if (unfiltered != "[]" && unfiltered != "" && url != "" && param != "") {
              print url " | " param " | Unfiltered: " unfiltered
            }
          }
          ' kxss-out.txt > kxss-reflected-pairs.txt

          # Helper function to count lines or return 0 if file doesn't exist
          count_or_zero(){
            [[ -f "$1" ]] && wc -l < "$1" || echo 0
          }

          # Generate summary counts (these might need adjustment based on actual artifact names from url-gathering.yaml)
          # Assuming artifacts like 'passive-wayback', 'passive-gau', 'combined-results' are available
          WAYBACK_COUNT=$(count_or_zero passive-wayback/waybackurls.txt)
          GAU_COUNT=$(count_or_zero passive-gau/gau.txt)
          ALLURLS_COUNT=$(count_or_zero combined-results/all-urls.txt) # Ensure this artifact name is correct
          STATIC_COUNT=$(grep -iv "?" combined-results/all-urls.txt 2>/dev/null | sort -u | wc -l || echo 0) # Ensure this artifact name is correct
          DYNAMIC_COUNT=$(count_or_zero dynamic-httpx.txt)
          HTTPX_COUNT=$(count_or_zero httpx.txt)
          UNFURLPARAMS_COUNT=$(count_or_zero combined-results/unfurl-params.txt) # Ensure this artifact name is correct
          X8_COUNT=$(count_or_zero x8-brute.txt)
          KXSS_COUNT=$(count_or_zero kxss-out.txt)

          # Print summary to console
          echo "============ Recon Summary for $DOMAIN ============"
          printf "%-22s: %d
" "waybackurls" "$WAYBACK_COUNT"
          printf "%-22s: %d
" "gau" "$GAU_COUNT"
          printf "%-22s: %d
" "All unique URLs" "$ALLURLS_COUNT"
          printf "%-22s: %d
" "Static URLs" "$STATIC_COUNT"
          printf "%-22s: %d
" "Dynamic URLs" "$DYNAMIC_COUNT"
          printf "%-22s: %d
" "Unique URL params" "$UNFURLPARAMS_COUNT"
          printf "%-22s: %d
" "httpx (alive URLs)" "$HTTPX_COUNT"
          printf "%-22s: %d
" "x8 reflections lines" "$X8_COUNT"
          printf "%-22s: %d
" "kxss scan lines" "$KXSS_COUNT"
          if [[ -n "${{ inputs.headers }}" ]]; then
            printf "%-22s: %s
" "Headers used" "${{ inputs.headers }}"
          fi
          echo "=================================================="

          # Show reflected pairs and health check
          if [[ -s "kxss-reflected-pairs.txt" ]]; then
            echo "[*] First 5 reflected pairs:"
            head -5 "kxss-reflected-pairs.txt"
          else
            echo "[!] No reflected pairs found."
          fi

          if grep -q "1.bigdav.ir" "kxss-reflected-pairs.txt"; then
            echo "[✓] Health check passed."
          else
            echo "[✗] Health check failed."
          fi

          # Save final results for upload artifact
          mkdir -p final-results
          cp httpx.txt final-results/ || true
          cp dynamic-httpx.txt final-results/ || true
          cp x8-brute.txt final-results/ || true
          cp kxss-out.txt final-results/ || true
          cp kxss-reflected-pairs.txt final-results/ || true

          # Also save the formatted summary to a file
          echo "============ Recon Summary for $DOMAIN ============" > final-results/FINAL_SUMMARY.txt
          printf "%-22s: %d
" "waybackurls" "$WAYBACK_COUNT" >> final-results/FINAL_SUMMARY.txt
          printf "%-22s: %d
" "gau" "$GAU_COUNT" >> final-results/FINAL_SUMMARY.txt
          printf "%-22s: %d
" "All unique URLs" "$ALLURLS_COUNT" >> final-results/FINAL_SUMMARY.txt
          printf "%-22s: %d
" "Static URLs" "$STATIC_COUNT" >> final-results/FINAL_SUMMARY.txt
          printf "%-22s: %d
" "Dynamic URLs" "$DYNAMIC_COUNT" >> final-results/FINAL_SUMMARY.txt
          printf "%-22s: %d
" "Unique URL params" "$UNFURLPARAMS_COUNT" >> final-results/FINAL_SUMMARY.txt
          printf "%-22s: %d
" "httpx (alive URLs)" "$HTTPX_COUNT" >> final-results/FINAL_SUMMARY.txt
          printf "%-22s: %d
" "x8 reflections lines" "$X8_COUNT" >> final-results/FINAL_SUMMARY.txt
          printf "%-22s: %d
" "kxss scan lines" "$KXSS_COUNT" >> final-results/FINAL_SUMMARY.txt
          if [[ -n "${{ inputs.headers }}" ]]; then
            printf "%-22s: %s
" "Headers used" "${{ inputs.headers }}" >> final-results/FINAL_SUMMARY.txt
          fi
          echo "==================================================" >> final-results/FINAL_SUMMARY.txt

      - name: Upload final results artifact
        uses: actions/upload-artifact@v4
        with:
          name: FINAL-RESULTS-${{ inputs.domain }}
          path: final-results/

