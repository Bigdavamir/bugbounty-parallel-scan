      - name: Generate final summary
        run: |
          mkdir -p final-results
          DOMAIN="${{ inputs.domain }}"

          # Collect all results
          find . -name "x8-results-*" -type d -exec cat {}/*.txt \; > all-x8-raw.txt || true
          find . -name "kxss-results-*" -type d -exec cat {}/*.txt \; > all-kxss-raw.txt || true

          # Parse kxss results with simple grep instead of awk
          grep "URL:" all-kxss-raw.txt | grep "Param:" | grep "Unfiltered:" | grep -v "Unfiltered: \[\]" > all-kxss-reflections.txt || touch all-kxss-reflections.txt

          # Parse x8 results  
          grep -E '^https?://[^[:space:]]+' all-x8-raw.txt > all-x8-reflections.txt 2>/dev/null || touch all-x8-reflections.txt

          # Count function
          count_or_zero(){
            if [[ -f "$1" ]]; then
              wc -l < "$1"
            else
              echo 0
            fi
          }

          WAYBACK_COUNT=$(count_or_zero url-collection-results/waybackurls.txt)
          GAU_COUNT=$(count_or_zero url-collection-results/gau.txt)
          ALLURLS_COUNT=$(count_or_zero url-collection-results/all-clean-urls.txt)
          STATIC_COUNT=$(count_or_zero url-collection-results/static-urls.txt)
          DYNAMIC_COUNT=$(count_or_zero url-collection-results/dynamic-urls.txt)
          HTTPX_COUNT=$(count_or_zero url-collection-results/all-alive-urls.txt)
          PARAMS_COUNT=$(count_or_zero url-collection-results/params.txt)
          X8_COUNT=$(count_or_zero all-x8-reflections.txt)
          KXSS_COUNT=$(count_or_zero all-kxss-reflections.txt)
          REFLECTED_COUNT=$(count_or_zero all-kxss-reflections.txt)

          # Create summary using printf
          {
            printf "============================================
"
            printf "          DISTRIBUTED SCAN RESULTS
"
            printf "============================================

"
            printf "Domain: %s
" "$DOMAIN"
            printf "Date: %s
" "$(date)"
            printf "Scan Type: Complete Security Assessment

"
            printf "============================================
"
            printf "              URL STATISTICS
" 
            printf "============================================

"
            printf "Passive Collection:
"
            printf "   Waybackurls found: %d URLs
" "$WAYBACK_COUNT"
            printf "   GAU found: %d URLs

" "$GAU_COUNT"
            printf "URL Processing:
"
            printf "   Total unique URLs: %d
" "$ALLURLS_COUNT"
            printf "   Static URLs: %d
" "$STATIC_COUNT"
            printf "   Dynamic URLs: %d
" "$DYNAMIC_COUNT"
            printf "   Alive URLs (httpx): %d
" "$HTTPX_COUNT"
            printf "   Unique parameters: %d

" "$PARAMS_COUNT"
            printf "============================================
"
            printf "           REFLECTION RESULTS
"
            printf "============================================

"
            printf "Parameter Discovery:
"
            printf "   x8 reflections: %d
" "$X8_COUNT"
            printf "   kxss reflections: %d

" "$KXSS_COUNT"
            printf "Reflected Parameters: %d

" "$REFLECTED_COUNT"
            printf "============================================
"
          } > final-results/FINAL_SUMMARY.txt

          # Copy all result files
          cp all-* final-results/ 2>/dev/null || true

          # Show first few reflected pairs if any
          if [[ -s "all-kxss-reflections.txt" ]]; then
            printf "
First 5 reflected pairs:
" >> final-results/FINAL_SUMMARY.txt
            head -5 "all-kxss-reflections.txt" >> final-results/FINAL_SUMMARY.txt
          else
            printf "
No reflected pairs found
" >> final-results/FINAL_SUMMARY.txt
          fi

          printf "============================================
" >> final-results/FINAL_SUMMARY.txt

          echo "Summary generated successfully"
