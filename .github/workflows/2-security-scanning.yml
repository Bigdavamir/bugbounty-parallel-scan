      - name: Generate final summary
        run: |
          mkdir -p final-results
          DOMAIN="${{ inputs.domain }}"

          find . -name "x8-results-*" -type d -exec cat {}/*.txt \; > all-x8-raw.txt || true
          find . -name "kxss-results-*" -type d -exec cat {}/*.txt \; > all-kxss-raw.txt || true

          awk '
          /^URL: .* Param: .* Unfiltered: / {
            url_start = index($0, "URL: ") + 5
            param_pos = index($0, " Param: ")
            url = substr($0, url_start, param_pos - url_start)

            param_start = param_pos + 8
            unfilt_pos = index($0, " Unfiltered: ")
            param = substr($0, param_start, unfilt_pos - param_start)

            unfilt_start = unfilt_pos + 13
            unfiltered = substr($0, unfilt_start)

            if (unfiltered != "[]" && unfiltered != "" && url != "" && param != "") {
              print url " | " param " | Unfiltered: " unfiltered
            }
          }
          ' all-kxss-raw.txt > all-kxss-reflections.txt

          grep -E '^https?://[^[:space:]]+' all-x8-raw.txt > all-x8-reflections.txt 2>/dev/null || touch all-x8-reflections.txt

          count_or_zero(){
            [[ -f "$1" ]] && wc -l < "$1" || echo 0
          }

          WAYBACK_COUNT=$(count_or_zero url-collection-results/waybackurls.txt)
          GAU_COUNT=$(count_or_zero url-collection-results/gau.txt)
          ALLURLS_COUNT=$(count_or_zero url-collection-results/all-clean-urls.txt)
          STATIC_COUNT=$(count_or_zero url-collection-results/static-urls.txt)
          DYNAMIC_COUNT=$(count_or_zero url-collection-results/dynamic-urls.txt)
          HTTPX_COUNT=$(count_or_zero url-collection-results/all-alive-urls.txt)
          PARAMS_COUNT=$(count_or_zero url-collection-results/params.txt)
          X8_COUNT=$(count_or_zero all-x8-reflections.txt)
          KXSS_COUNT=$(count_or_zero all-kxss-reflections.txt)
          REFLECTED_COUNT=$(count_or_zero all-kxss-reflections.txt)

          cat > final-results/FINAL_SUMMARY.txt << EOF
============================================
          DISTRIBUTED SCAN RESULTS
============================================

üåê Domain: $DOMAIN
üìÖ Date: \$(date)
üìä Scan Type: Complete Security Assessment

============================================
              URL STATISTICS
============================================

üìÇ Passive Collection:
- Waybackurls found: $WAYBACK_COUNT URLs
- GAU found: $GAU_COUNT URLs

üîç URL Processing:
- Total unique URLs: $ALLURLS_COUNT
- Static URLs: $STATIC_COUNT  
- Dynamic URLs: $DYNAMIC_COUNT
- Alive URLs (httpx): $HTTPX_COUNT
- Unique parameters: $PARAMS_COUNT

============================================
           REFLECTION RESULTS  
============================================

üéØ Parameter Discovery:
- x8 reflections: $X8_COUNT
- kxss reflections: $KXSS_COUNT

üî• Reflected Parameters: $REFLECTED_COUNT

============================================
              FILES AVAILABLE
============================================

üìÅ URL Collections:
- all-alive-urls.txt (Live URLs after httpx verification)
- all-clean-urls.txt (All filtered URLs)
- dynamic-urls.txt (URLs with parameters)  
- static-urls.txt (URLs without parameters)
- params.txt (Unique parameter names)

üîç Reflection Results:
- all-x8-reflections.txt (x8 discovered parameters)
- all-kxss-reflections.txt (kxss reflection results)
- all-x8-raw.txt (Raw x8 output)
- all-kxss-raw.txt (Raw kxss output)

============================================
              NEXT STEPS
============================================

1. Review reflected parameters in all-kxss-reflections.txt
2. Test x8 discoveries in all-x8-reflections.txt  
3. Manual verification of promising endpoints
4. Advanced payload testing on reflected parameters
EOF

          cp all-* final-results/ 2>/dev/null || true

          indent="    "
          echo "============================================" | tee -a final-results/FINAL_SUMMARY.txt
          echo "              SUMMARY STATISTICS            " | tee -a final-results/FINAL_SUMMARY.txt  
          echo "============================================" | tee -a final-results/FINAL_SUMMARY.txt
          echo "${indent}Domain: $DOMAIN" | tee -a final-results/FINAL_SUMMARY.txt
          echo "${indent}Wayback URLs: $WAYBACK_COUNT" | tee -a final-results/FINAL_SUMMARY.txt
          echo "${indent}GAU URLs: $GAU_COUNT" | tee -a final-results/FINAL_SUMMARY.txt
          echo "${indent}Total URLs: $ALLURLS_COUNT" | tee -a final-results/FINAL_SUMMARY.txt
          echo "${indent}Static URLs: $STATIC_COUNT" | tee -a final-results/FINAL_SUMMARY.txt
          echo "${indent}Dynamic URLs: $DYNAMIC_COUNT" | tee -a final-results/FINAL_SUMMARY.txt
          echo "${indent}Alive URLs: $HTTPX_COUNT" | tee -a final-results/FINAL_SUMMARY.txt
          echo "${indent}Unique parameters: $PARAMS_COUNT" | tee -a final-results/FINAL_SUMMARY.txt
          echo "${indent}x8 reflections Lines: $X8_COUNT" | tee -a final-results/FINAL_SUMMARY.txt
          echo "${indent}kxss scan Lines: $KXSS_COUNT" | tee -a final-results/FINAL_SUMMARY.txt
          echo "${indent}Reflected pairs: $REFLECTED_COUNT" | tee -a final-results/FINAL_SUMMARY.txt

          if [[ -s "all-kxss-reflections.txt" ]]; then
            echo "" | tee -a final-results/FINAL_SUMMARY.txt
            echo "üî• First 5 reflected pairs:" | tee -a final-results/FINAL_SUMMARY.txt
            head -5 "all-kxss-reflections.txt" | tee -a final-results/FINAL_SUMMARY.txt
          else
            echo "‚ùå No reflected pairs found" | tee -a final-results/FINAL_SUMMARY.txt
          fi

          if [[ -n "${{ inputs.headers }}" ]]; then
            echo "" | tee -a final-results/FINAL_SUMMARY.txt
            echo "${indent}Headers used: ${{ inputs.headers }}" | tee -a final-results/FINAL_SUMMARY.txt
          fi
          
          echo "============================================" | tee -a final-results/FINAL_SUMMARY.txt
