kxss-scan:
    needs: consolidate-httpx
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chunk: [1, 2, 3, 4, 5, 6]
    steps:
      # Try to get data from artifact first
      - name: Download consolidated httpx results
        uses: actions/download-artifact@v4
        with:
          name: consolidated-httpx-results
          path: consolidated-httpx-results/

      # Fallback to cache if artifact download failed
      - name: Restore consolidated httpx results from cache (backup)
        uses: actions/cache@v4
        with:
          path: consolidated-httpx-results/
          key: consolidated-httpx-results-${{ inputs.run_id }}
          restore-keys: |
            consolidated-httpx-results-
        continue-on-error: true

      - name: Download combined results
        uses: actions/download-artifact@v4
        with:
          name: combined-results
          path: combined-results/
        continue-on-error: true

      - name: Debug downloaded artifacts
        run: |
          echo "==== consolidated-httpx-results content ===="
          find consolidated-httpx-results -type f -exec ls -l {} \;
          if [ -f "consolidated-httpx-results/all-httpx.txt" ]; then
            echo "File exists with $(wc -l < consolidated-httpx-results/all-httpx.txt) lines"
            head -5 consolidated-httpx-results/all-httpx.txt
          else
            echo "all-httpx.txt file not found"
          fi
          
          # Check for unfurl-params.txt
          if [ -f "consolidated-httpx-results/unfurl-params.txt" ]; then
            echo "unfurl-params.txt exists with $(wc -l < consolidated-httpx-results/unfurl-params.txt) lines"
            head -5 consolidated-httpx-results/unfurl-params.txt
          elif [ -f "combined-results/unfurl-params.txt" ]; then
            echo "unfurl-params.txt found in combined-results with $(wc -l < combined-results/unfurl-params.txt) lines"
            head -5 combined-results/unfurl-params.txt
            # Copy to consolidated results for consistency
            cp combined-results/unfurl-params.txt consolidated-httpx-results/
          else
            echo "unfurl-params.txt not found in any location"
          fi

      # Install both httpx and kxss with better error handling
      - name: Install tools
        run: |
          # Install Go
          if ! command -v go &> /dev/null; then
            echo "Installing Go..."
            wget https://golang.org/dl/go1.20.2.linux-amd64.tar.gz
            sudo tar -C /usr/local -xzf go1.20.2.linux-amd64.tar.gz
            export PATH=$PATH:/usr/local/go/bin
            export GOPATH=$HOME/go
            export PATH=$PATH:$GOPATH/bin
            echo "export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin" >> $GITHUB_ENV
          fi
          
          # Install httpx
          echo "Installing httpx..."
          go install github.com/projectdiscovery/httpx/cmd/httpx@latest
          
          # Install kxss - with retry and proper path export
          echo "Installing kxss..."
          export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
          go install github.com/Emoe/kxss@latest
          
          # Check if kxss is installed, if not create a fallback script
          if ! command -v kxss &> /dev/null; then
            echo "kxss installation failed, creating fallback script"
            cat << 'EOF' > /tmp/kxss
#!/bin/bash
# This is a fallback script when kxss fails to install
echo "Fallback kxss script running"
while read url; do
  echo "$url - [FALLBACK SCRIPT] Unable to test properly"
done
EOF
            chmod +x /tmp/kxss
            sudo mv /tmp/kxss /usr/local/bin/kxss
          fi
          
          # Verify installations
          echo "Verifying tools..."
          which httpx || echo "httpx not installed"
          which kxss || echo "kxss not installed, using fallback"

      - name: Run kxss on chunk
        run: |
          # Make sure to export PATH in this step too
          export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
          
          mkdir -p kxss-results-${{ matrix.chunk }}
          
          if [ -f "consolidated-httpx-results/all-httpx.txt" ] && [ -s "consolidated-httpx-results/all-httpx.txt" ]; then
            echo "Using consolidated httpx results"
            TOTAL_LINES=$(wc -l < consolidated-httpx-results/all-httpx.txt)
            LINES_PER_CHUNK=$((TOTAL_LINES / 6 + 1))
            START_LINE=$((((${{ matrix.chunk }} - 1) * LINES_PER_CHUNK) + 1))
            END_LINE=$((${{ matrix.chunk }} * LINES_PER_CHUNK))
            
            sed -n "${START_LINE},${END_LINE}p" consolidated-httpx-results/all-httpx.txt > kxss-urls-${{ matrix.chunk }}.txt
            
            if [[ -s "kxss-urls-${{ matrix.chunk }}.txt" ]]; then
              echo "Running kxss for chunk ${{ matrix.chunk }} with $(wc -l < kxss-urls-${{ matrix.chunk }}.txt) URLs"
              echo "First 5 URLs:"
              head -5 kxss-urls-${{ matrix.chunk }}.txt
              
              # Check for unfurl-params.txt in multiple locations
              PARAMS_FILE=""
              if [[ -s "consolidated-httpx-results/unfurl-params.txt" ]]; then
                PARAMS_FILE="consolidated-httpx-results/unfurl-params.txt"
                echo "Using unfurl-params.txt from consolidated-httpx-results"
              elif [[ -s "combined-results/unfurl-params.txt" ]]; then
                PARAMS_FILE="combined-results/unfurl-params.txt"
                echo "Using unfurl-params.txt from combined-results"
              else
                echo "No unfurl-params.txt found, creating minimal version"
                echo "q" > temp-params.txt
                echo "s" >> temp-params.txt
                echo "search" >> temp-params.txt
                PARAMS_FILE="temp-params.txt"
              fi
              
              echo "Parameters file contains $(wc -l < $PARAMS_FILE) entries"
              
              # Generate URLs with parameters for kxss
              cat kxss-urls-${{ matrix.chunk }}.txt | while IFS= read -r url; do
                # Extract base URL without existing parameters
                BASE_URL=$(echo "$url" | cut -d'?' -f1)
                echo "Processing base URL: $BASE_URL"
                
                while IFS= read -r param; do
                  echo "$BASE_URL?${param}=KXSS"
                done < $PARAMS_FILE
              done | sort -u > kxss-urls-final-${{ matrix.chunk }}.txt
              
              if [[ -s "kxss-urls-final-${{ matrix.chunk }}.txt" ]]; then
                echo "Processing $(wc -l < kxss-urls-final-${{ matrix.chunk }}.txt) final URLs with kxss"
                echo "Sample URLs for kxss:"
                head -5 kxss-urls-final-${{ matrix.chunk }}.txt
                
                # Verify kxss is available
                if command -v kxss &> /dev/null; then
                  cat kxss-urls-final-${{ matrix.chunk }}.txt | kxss -timeout 300 -threads 50 > kxss-results-${{ matrix.chunk }}/kxss-output.txt || {
                    echo "kxss scan failed for chunk ${{ matrix.chunk }}"
                    touch kxss-results-${{ matrix.chunk }}/kxss-output.txt
                  }
                else
                  echo "kxss command not available, using curl fallback"
                  # Simple fallback using curl
                  while IFS= read -r url; do
                    echo "Testing: $url"
                    echo "$url - [FALLBACK] Unable to test properly" >> kxss-results-${{ matrix.chunk }}/kxss-output.txt
                  done < kxss-urls-final-${{ matrix.chunk }}.txt
                fi
              else
                echo "No final URLs generated, creating empty output"
                touch kxss-results-${{ matrix.chunk }}/kxss-output.txt
              fi
            else
              echo "No URLs for this chunk, creating empty output"
              touch kxss-results-${{ matrix.chunk }}/kxss-output.txt
            fi
          else
            echo "No consolidated httpx results found, creating empty output"
            touch kxss-results-${{ matrix.chunk }}/kxss-output.txt
          fi
          
          echo "kxss found $(wc -l < kxss-results-${{ matrix.chunk }}/kxss-output.txt) results for chunk ${{ matrix.chunk }}"

      - name: Debug kxss output
        run: |
          echo "kxss-results-${{ matrix.chunk }}/ content:"
          ls -la kxss-results-${{ matrix.chunk }}/ || true
          head -10 kxss-results-${{ matrix.chunk }}/kxss-output.txt || true

      - name: Upload kxss results
        uses: actions/upload-artifact@v4
        with:
          name: kxss-results-${{ matrix.chunk }}
          path: kxss-results-${{ matrix.chunk }}/
          retention-days: 1
          if-no-files-found: warn

  # This job consolidates all results into a single artifact
  collect-results:
    needs: [x8-scan, kxss-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Create results directory
        run: |
          mkdir -p all-results/x8
          mkdir -p all-results/kxss

      # Download all x8 results
      - name: Download x8 results
        uses: actions/download-artifact@v4
        with:
          pattern: x8-results-*
          path: downloaded-x8-results
          merge-multiple: true

      # Download all kxss results
      - name: Download kxss results
        uses: actions/download-artifact@v4
        with:
          pattern: kxss-results-*
          path: downloaded-kxss-results
          merge-multiple: true

      - name: Combine all results
        run: |
          # Debug output to see the actual structure
          echo "==== X8 downloaded structure ===="
          find downloaded-x8-results -type f | sort
          
          echo "==== KXSS downloaded structure ===="
          find downloaded-kxss-results -type f | sort
          
          # Combine x8 results with better error handling
          echo "Combining x8 results..."
          if find downloaded-x8-results -name "x8.txt" -type f 2>/dev/null | grep -q .; then
            find downloaded-x8-results -name "x8.txt" -type f -exec cat {} \; > all-results/x8/combined-x8-results.txt
            echo "Combined $(wc -l < all-results/x8/combined-x8-results.txt) x8 results"
          elif [ -f "downloaded-x8-results/x8.txt" ]; then
            # Handle merged artifacts case
            cat downloaded-x8-results/x8.txt > all-results/x8/combined-x8-results.txt
            echo "Combined $(wc -l < all-results/x8/combined-x8-results.txt) x8 results (from merged artifacts)"
          else
            echo "No x8 results found"
            touch all-results/x8/combined-x8-results.txt
          fi
          
          # Combine kxss results with better error handling
          echo "Combining kxss results..."
          if find downloaded-kxss-results -name "kxss-output.txt" -type f 2>/dev/null | grep -q .; then
            find downloaded-kxss-results -name "kxss-output.txt" -type f -exec cat {} \; > all-results/kxss/combined-kxss-results.txt
            echo "Combined $(wc -l < all-results/kxss/combined-kxss-results.txt) kxss results"
          elif [ -f "downloaded-kxss-results/kxss-output.txt" ]; then
            # Handle merged artifacts case
            cat downloaded-kxss-results/kxss-output.txt > all-results/kxss/combined-kxss-results.txt
            echo "Combined $(wc -l < all-results/kxss/combined-kxss-results.txt) kxss results (from merged artifacts)"
          else
            echo "No kxss results found"
            touch all-results/kxss/combined-kxss-results.txt
          fi

      - name: Upload combined results
        uses: actions/upload-artifact@v4
        with:
          name: all-xss-scan-results
          path: all-results/
          retention-days: 7
