name: XSS Tools Execution

on:
  workflow_call:
    inputs:
      domain:
        required: true
        type: string
      headers:
        required: false
        type: string
      run_id:
        required: true
        type: string

jobs:

  httpx-scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chunk: [1, 2, 3, 4, 5, 6, 7, 8]
    steps:
      - name: Restore combined results
        uses: actions/cache@v4
        with:
          path: combined-results/
          key: combined-results-${{ inputs.run_id }}
          restore-keys: combined-results-

      - name: Debug dynamic-urls.txt presence
        run: |
          echo ">> Checking combined-results/dynamic-urls.txt"
          ls -l combined-results || true
          head -10 combined-results/dynamic-urls.txt 2>/dev/null || echo "NO FILE"
          wc -l combined-results/dynamic-urls.txt 2>/dev/null || echo "NO FILE"

      - name: Install httpx
        run: |
          go install github.com/projectdiscovery/httpx/cmd/httpx@latest
          export PATH="$PATH:$(go env GOPATH)/bin"
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Run httpx on chunk and save output
        run: |
          mkdir -p httpx-results-${{ matrix.chunk }}
          mkdir -p shared-httpx-results

          export PATH="$PATH:$(go env GOPATH)/bin"
          if [[ -f "combined-results/dynamic-urls.txt" ]] && [[ -s "combined-results/dynamic-urls.txt" ]]; then
            TOTAL_LINES=$(wc -l < combined-results/dynamic-urls.txt)
            LINES_PER_CHUNK=$((TOTAL_LINES / 8 + 1))
            START_LINE=$((((${{ matrix.chunk }} - 1) * LINES_PER_CHUNK) + 1))
            END_LINE=$((${{ matrix.chunk }} * LINES_PER_CHUNK))

            sed -n "${START_LINE},${END_LINE}p" combined-results/dynamic-urls.txt > chunk-${{ matrix.chunk }}.txt
            echo ">> chunk-${{ matrix.chunk }}.txt:"
            wc -l chunk-${{ matrix.chunk }}.txt || echo "-"
            head -10 chunk-${{ matrix.chunk }}.txt || echo "-"

            if [[ -s "chunk-${{ matrix.chunk }}.txt" ]]; then
              cat chunk-${{ matrix.chunk }}.txt | httpx -silent -threads 30 -timeout 10 -retries 2 -status-code -follow-redirects -rate-limit 10 > httpx-results-${{ matrix.chunk }}/httpx.txt || {
                echo "httpx failed, fallback to plain chunk"
                cp chunk-${{ matrix.chunk }}.txt httpx-results-${{ matrix.chunk }}/httpx.txt
              }
              cp httpx-results-${{ matrix.chunk }}/httpx.txt shared-httpx-results/httpx-${{ matrix.chunk }}.txt
            else
              touch httpx-results-${{ matrix.chunk }}/httpx.txt
              touch shared-httpx-results/httpx-${{ matrix.chunk }}.txt
            fi
          else
            touch httpx-results-${{ matrix.chunk }}/httpx.txt
            touch shared-httpx-results/httpx-${{ matrix.chunk }}.txt
          fi

      - name: Debug httpx-results of current chunk
        run: |
          ls -l httpx-results-${{ matrix.chunk }}/ || true
          head -10 httpx-results-${{ matrix.chunk }}/httpx.txt || true
          wc -l httpx-results-${{ matrix.chunk }}/httpx.txt || echo "-"

      - name: Debug shared-httpx-results dir
        run: |
          ls -l shared-httpx-results/ || true
          head -10 shared-httpx-results/httpx-${{ matrix.chunk }}.txt 2>/dev/null || echo "NO FILE"

      - name: Cache httpx results
        uses: actions/cache@v4
        with:
          path: httpx-results-${{ matrix.chunk }}/
          key: httpx-results-${{ matrix.chunk }}-${{ inputs.run_id }}

      - name: Cache shared httpx results
        uses: actions/cache@v4
        with:
          path: shared-httpx-results/
          key: shared-httpx-results-${{ inputs.run_id }}-${{ matrix.chunk }}

  consolidate-httpx:
    needs: httpx-scan
    runs-on: ubuntu-latest
    steps:
      - name: Create output directory
        run: mkdir -p consolidated-httpx-results

      - name: Restore shared httpx results
        uses: actions/cache@v4
        with:
          path: shared-httpx-results/
          key: not-used-shared
          restore-keys: shared-httpx-results-${{ inputs.run_id }}-

      - name: Restore all httpx results (backup)
        uses: actions/cache@v4
        with:
          path: |
            httpx-results-1/
            httpx-results-2/
            httpx-results-3/
            httpx-results-4/
            httpx-results-5/
            httpx-results-6/
            httpx-results-7/
            httpx-results-8/
          key: not-used
          restore-keys: |
            httpx-results-1-${{ inputs.run_id }}
            httpx-results-2-${{ inputs.run_id }}
            httpx-results-3-${{ inputs.run_id }}
            httpx-results-4-${{ inputs.run_id }}
            httpx-results-5-${{ inputs.run_id }}
            httpx-results-6-${{ inputs.run_id }}
            httpx-results-7-${{ inputs.run_id }}
            httpx-results-8-${{ inputs.run_id }}

      - name: Debug all httpx result files before consolidate
        run: |
          echo ">> All httpx result files:"
          ls -l httpx-results-*/httpx.txt 2>/dev/null || echo "No files"
          for f in httpx-results-*/httpx.txt; do
            echo "==== $f ===="
            head -10 "$f" || echo "NO FILE"
            wc -l "$f" || echo "-"
          done

      # --- FIXED & SAFE CONSOLIDATION ---
      - name: Consolidate all httpx results (strip codes and colors, safe)
        run: |
          COUNT=$(find . -type f -path './httpx-results-*/httpx.txt' | wc -l)
          echo "Discovered chunk file count: $COUNT"
          if [ "$COUNT" -eq 0 ]; then
            echo "NO chunk files to consolidate"
            touch consolidated-httpx-results/all-httpx.txt
          else
            find . -type f -path './httpx-results-*/httpx.txt' -exec cat {} + | \
              sed -E 's/\x1b\[[0-9;]*m//g' | \               sed -E 's/ *\[[0-9]{3}\]$//' | \
              sed 's/ *$//' | \
              sort -u > consolidated-httpx-results/all-httpx.txt
          fi
          echo "Preview of consolidated-httpx-results/all-httpx.txt"
          head -20 consolidated-httpx-results/all-httpx.txt || echo "No results"
          echo "Total cleaned URLs: $(wc -l < consolidated-httpx-results/all-httpx.txt)"

      - name: Cache consolidated httpx results
        uses: actions/cache@v4
        with:
          path: consolidated-httpx-results/
          key: consolidated-httpx-results-${{ inputs.run_id }}

  x8-scan:
    needs: consolidate-httpx
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chunk: [1, 2, 3, 4]
    steps:
      - name: Restore combined results
        uses: actions/cache@v4
        with:
          path: combined-results/
          key: combined-results-${{ inputs.run_id }}
          restore-keys: combined-results-

      - name: Restore consolidated httpx results
        uses: actions/cache@v4
        with:
          path: consolidated-httpx-results/
          key: consolidated-httpx-results-${{ inputs.run_id }}

      - name: Debug consolidated input for chunk
        run: |
          echo "Consolidated file present? $(ls -l consolidated-httpx-results/all-httpx.txt 2>/dev/null || echo NA)"
          head -10 consolidated-httpx-results/all-httpx.txt || echo "No consolidated file"
          wc -l consolidated-httpx-results/all-httpx.txt || echo "-"

      - name: Install x8
        run: |
          wget https://github.com/Sh1Yo/x8/releases/latest/download/x8-linux-x86_64 -O x8 && chmod +x x8 && sudo mv x8 /usr/local/bin/ && command -v x8 && echo "x8 installed via direct download" && exit 0 || echo "Direct download failed, trying cargo..."
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source "$HOME/.cargo/env"
          cargo install x8 && echo "x8 installed via cargo" && exit 0

      - name: Run x8 on ALL alive URLs
        run: |
          mkdir -p x8-results-${{ matrix.chunk }}
          if [ -s consolidated-httpx-results/all-httpx.txt ] && [ -s combined-results/unfurl-params.txt ]; then
            TOTAL_LINES=$(wc -l < consolidated-httpx-results/all-httpx.txt)
            LINES_PER_CHUNK=$((TOTAL_LINES / 4 + 1))
            START_LINE=$((((${{ matrix.chunk }} - 1) * LINES_PER_CHUNK) + 1))
            END_LINE=$((${{ matrix.chunk }} * LINES_PER_CHUNK))
            sed -n "${START_LINE},${END_LINE}p" consolidated-httpx-results/all-httpx.txt > x8-chunk-${{ matrix.chunk }}.txt
            wc -l x8-chunk-${{ matrix.chunk }}.txt
            head -10 x8-chunk-${{ matrix.chunk }}.txt
            if [[ -s "x8-chunk-${{ matrix.chunk }}.txt" ]]; then
              if [[ -n "${{ inputs.headers }}" ]]; then
                cat x8-chunk-${{ matrix.chunk }}.txt | xargs -P 4 -I{} x8 -u "{}" -w combined-results/unfurl-params.txt -X GET POST -H "${{ inputs.headers }}" > x8-results-${{ matrix.chunk }}/x8.txt || true
              else
                cat x8-chunk-${{ matrix.chunk }}.txt | xargs -P 4 -I{} x8 -u "{}" -w combined-results/unfurl-params.txt -X GET POST > x8-results-${{ matrix.chunk }}/x8.txt || true
              fi
            else
              touch x8-results-${{ matrix.chunk }}/x8.txt
            fi
          else
            touch x8-results-${{ matrix.chunk }}/x8.txt
          fi
          wc -l x8-results-${{ matrix.chunk }}/x8.txt || echo "-"
          head -10 x8-results-${{ matrix.chunk }}/x8.txt || echo "No output"

      - name: Cache x8 results
        uses: actions/cache@v4
        with:
          path: x8-results-${{ matrix.chunk }}/
          key: x8-results-${{ matrix.chunk }}-${{ inputs.run_id }}

  kxss-scan:
    needs: consolidate-httpx
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chunk: [1, 2, 3, 4, 5, 6]
    steps:
      - name: Restore combined results
        uses: actions/cache@v4
        with:
          path: combined-results/
          key: combined-results-${{ inputs.run_id }}
          restore-keys: combined-results-

      - name: Restore consolidated httpx results
        uses: actions/cache@v4
        with:
          path: consolidated-httpx-results/
          key: consolidated-httpx-results-${{ inputs.run_id }}

      - name: Install httpx
        run: |
          go install github.com/projectdiscovery/httpx/cmd/httpx@latest
          export PATH="$PATH:$(go env GOPATH)/bin"
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Install kxss
        run: |
          go install github.com/Emoe/kxss@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Debug consolidated input for kxss
        run: |
          echo "Consolidated file present? $(ls -l consolidated-httpx-results/all-httpx.txt 2>/dev/null || echo NA)"
          head -10 consolidated-httpx-results/all-httpx.txt || echo "No consolidated file"
          wc -l consolidated-httpx-results/all-httpx.txt || echo "-"

      - name: Run kxss on consolidated results
        run: |
          mkdir -p kxss-results-${{ matrix.chunk }}
          export PATH="$PATH:$(go env GOPATH)/bin"
          if [ -s consolidated-httpx-results/all-httpx.txt ] && [ -s combined-results/unfurl-params.txt ]; then
            TOTAL_LINES=$(wc -l < consolidated-httpx-results/all-httpx.txt)
            LINES_PER_CHUNK=$((TOTAL_LINES / 6 + 1))
            START_LINE=$((((${{ matrix.chunk }} - 1) * LINES_PER_CHUNK) + 1))
            END_LINE=$((${{ matrix.chunk }} * LINES_PER_CHUNK))
            sed -n "${START_LINE},${END_LINE}p" consolidated-httpx-results/all-httpx.txt > kxss-urls-${{ matrix.chunk }}.txt
            wc -l kxss-urls-${{ matrix.chunk }}.txt
            head -5 kxss-urls-${{ matrix.chunk }}.txt
            if [[ -s "kxss-urls-${{ matrix.chunk }}.txt" ]]; then
              cat kxss-urls-${{ matrix.chunk }}.txt | while IFS= read -r url; do
                while IFS= read -r param; do
                  echo "$url?${param}=KXSS"
                done < combined-results/unfurl-params.txt
              done | sort -u > kxss-urls-final-${{ matrix.chunk }}.txt
              wc -l kxss-urls-final-${{ matrix.chunk }}.txt
              head -5 kxss-urls-final-${{ matrix.chunk }}.txt
              if [[ -s "kxss-urls-final-${{ matrix.chunk }}.txt" ]]; then
                cat kxss-urls-final-${{ matrix.chunk }}.txt | kxss -timeout 300 -threads 50 > kxss-results-${{ matrix.chunk }}/kxss-output.txt || {
                  echo "kxss scan failed for chunk ${{ matrix.chunk }}"
                  touch kxss-results-${{ matrix.chunk }}/kxss-output.txt
                }
              else
                touch kxss-results-${{ matrix.chunk }}/kxss-output.txt
              fi
            else
              touch kxss-results-${{ matrix.chunk }}/kxss-output.txt
            fi
          else
            touch kxss-results-${{ matrix.chunk }}/kxss-output.txt
          fi
          wc -l kxss-results-${{ matrix.chunk }}/kxss-output.txt || echo "-"
          head -10 kxss-results-${{ matrix.chunk }}/kxss-output.txt || echo "No output"

      - name: Cache kxss results
        uses: actions/cache@v4
        with:
          path: kxss-results-${{ matrix.chunk }}/
          key: kxss-results-${{ matrix.chunk }}-${{ inputs.run_id }}
