name: XSS Tools Execution

on:
  workflow_call:
    inputs:
      domain:
        required: true
        type: string
      headers:
        required: false
        type: string
      run_id:
        required: true
        type: string

jobs:
  httpx-scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chunk: [1, 2, 3, 4, 5, 6, 7, 8]
    steps:
      - name: Restore combined results
        uses: actions/cache@v4
        with:
          path: combined-results/
          key: combined-results-${{ inputs.run_id }}
          restore-keys: |
            combined-results-

      - name: Debug dynamic-urls
        run: |
          echo "==== combined-results/dynamic-urls.txt preview ===="
          if [[ -f combined-results/dynamic-urls.txt ]]; then
            head -10 combined-results/dynamic-urls.txt
            wc -l combined-results/dynamic-urls.txt
          else
            echo "combined-results/dynamic-urls.txt not found!"
          fi

      - name: Install httpx with PATH fix
        run: |
          go install github.com/projectdiscovery/httpx/cmd/httpx@latest
          echo "export PATH=\$PATH:\$(go env GOPATH)/bin" >> $GITHUB_ENV
          export PATH=$PATH:$(go env GOPATH)/bin
          echo "Go PATH: $(go env GOPATH)"
          echo "Current PATH: $PATH"
          echo "httpx location: $(which httpx || echo 'not found in PATH')"
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Run httpx on chunk
        run: |
          mkdir -p httpx-results-${{ matrix.chunk }}
          mkdir -p shared-httpx-results
          export PATH=$PATH:$(go env GOPATH)/bin
          if [[ -f "combined-results/dynamic-urls.txt" ]] && [[ -s "combined-results/dynamic-urls.txt" ]]; then
            TOTAL_LINES=$(wc -l < combined-results/dynamic-urls.txt)
            LINES_PER_CHUNK=$((TOTAL_LINES / 8 + 1))
            START_LINE=$((((${{ matrix.chunk }} - 1) * LINES_PER_CHUNK) + 1))
            END_LINE=$((${{ matrix.chunk }} * LINES_PER_CHUNK))
            sed -n "${START_LINE},${END_LINE}p" combined-results/dynamic-urls.txt > chunk-${{ matrix.chunk }}.txt
            if [[ -s "chunk-${{ matrix.chunk }}.txt" ]]; then
              echo "Processing chunk ${{ matrix.chunk }} with $(wc -l < chunk-${{ matrix.chunk }}.txt) URLs"
              cat chunk-${{ matrix.chunk }}.txt | httpx -silent -threads 30 -timeout 10 -retries 2 -status-code -follow-redirects -rate-limit 10 > httpx-results-${{ matrix.chunk }}/httpx.txt || {
                echo "httpx failed for chunk ${{ matrix.chunk }}, using input URLs as fallback"
                cp chunk-${{ matrix.chunk }}.txt httpx-results-${{ matrix.chunk }}/httpx.txt
              }
              # Save to shared location as well
              cp httpx-results-${{ matrix.chunk }}/httpx.txt shared-httpx-results/httpx-${{ matrix.chunk }}.txt
            else
              touch httpx-results-${{ matrix.chunk }}/httpx.txt
              touch shared-httpx-results/httpx-${{ matrix.chunk }}.txt
            fi
          else
            touch httpx-results-${{ matrix.chunk }}/httpx.txt
            touch shared-httpx-results/httpx-${{ matrix.chunk }}.txt
          fi
          ALIVE_COUNT=$(wc -l < httpx-results-${{ matrix.chunk }}/httpx.txt)
          echo "Chunk ${{ matrix.chunk }} found $ALIVE_COUNT alive URLs"
          
          # Create a marker file to verify this job completed successfully
          echo "Job completed" > httpx-results-${{ matrix.chunk }}/job_completed.marker

      - name: Debug httpx-results dir after scan
        run: |
          echo "httpx-results-${{ matrix.chunk }}/ content:"
          ls -l httpx-results-${{ matrix.chunk }}/ || true
          head -10 httpx-results-${{ matrix.chunk }}/httpx.txt || true

      # Cache individual chunk results
      - name: Cache httpx results
        uses: actions/cache@v4
        with:
          path: httpx-results-${{ matrix.chunk }}/
          key: httpx-results-${{ matrix.chunk }}-${{ inputs.run_id }}
      
      # Cache all results in a shared location too
      - name: Cache shared httpx results
        uses: actions/cache@v4
        with:
          path: shared-httpx-results/
          key: shared-httpx-results-${{ inputs.run_id }}-${{ matrix.chunk }}

  # This job consolidates all httpx results into one place
  consolidate-httpx:
    needs: httpx-scan
    runs-on: ubuntu-latest
    steps:
      - name: Create output directory
        run: mkdir -p consolidated-httpx-results
      
      # Try to restore from shared location first
      - name: Restore shared httpx results
        uses: actions/cache@v4
        with:
          path: shared-httpx-results/
          key: not-used-shared
          restore-keys: |
            shared-httpx-results-${{ inputs.run_id }}-

      # Also try individual chunks as backup
      - name: Restore all httpx results (backup method)
        uses: actions/cache@v4
        with:
          path: |
            httpx-results-1/
            httpx-results-2/
            httpx-results-3/
            httpx-results-4/
            httpx-results-5/
            httpx-results-6/
            httpx-results-7/
            httpx-results-8/
          key: not-used
          restore-keys: |
            httpx-results-1-${{ inputs.run_id }}
            httpx-results-2-${{ inputs.run_id }}
            httpx-results-3-${{ inputs.run_id }}
            httpx-results-4-${{ inputs.run_id }}
            httpx-results-5-${{ inputs.run_id }}
            httpx-results-6-${{ inputs.run_id }}
            httpx-results-7-${{ inputs.run_id }}
            httpx-results-8-${{ inputs.run_id }}

      - name: Consolidate all httpx results
        run: |
          # First try the shared location
          if find shared-httpx-results -name "*.txt" -type f 2>/dev/null | grep -q .; then
            echo "Using shared httpx results"
            cat shared-httpx-results/*.txt > consolidated-httpx-results/all-httpx.txt
          # Then try individual chunks
          elif find httpx-results-* -name "httpx.txt" -type f 2>/dev/null | grep -q .; then
            echo "Using individual httpx results"
            find httpx-results-* -name "httpx.txt" -type f -exec cat {} \; > consolidated-httpx-results/all-httpx.txt
          # Finally fallback to dynamic-urls.txt
          else
            echo "No httpx results found, attempting to restore combined results"
            # Restore combined results as final fallback
            mkdir -p combined-results
            echo "Restoring combined results"
            
            # Try to restore combined results
            actions_cache_exists=false
            if curl -s -f "https://artifactcache.actions.githubusercontent.com/combined-results-${{ inputs.run_id }}" > /dev/null; then
              actions_cache_exists=true
            fi
            
            if $actions_cache_exists; then
              echo "Cache exists, attempting to restore"
              mkdir -p combined-results-tmp
              cd combined-results-tmp
              curl -s "https://artifactcache.actions.githubusercontent.com/combined-results-${{ inputs.run_id }}" | tar -xzf -
              if [ -f "combined-results/dynamic-urls.txt" ]; then
                cp combined-results/dynamic-urls.txt ../combined-results/
              fi
              cd ..
            fi
            
            if [ -f "combined-results/dynamic-urls.txt" ]; then
              echo "Using dynamic-urls.txt as fallback"
              grep '?' combined-results/dynamic-urls.txt > consolidated-httpx-results/all-httpx.txt || true
            else
              echo "No sources available, creating empty file"
              touch consolidated-httpx-results/all-httpx.txt
            fi
          fi
          
          echo "Consolidated httpx results preview:"
          head -10 consolidated-httpx-results/all-httpx.txt || true
          echo "Total consolidated URLs: $(wc -l < consolidated-httpx-results/all-httpx.txt)"
      
      # Cache the consolidated results
      - name: Cache consolidated httpx results
        uses: actions/cache@v4
        with:
          path: consolidated-httpx-results/
          key: consolidated-httpx-results-${{ inputs.run_id }}

  x8-scan:
    needs: consolidate-httpx
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chunk: [1, 2, 3, 4]
    steps:
      - name: Restore combined results
        uses: actions/cache@v4
        with:
          path: combined-results/
          key: combined-results-${{ inputs.run_id }}
          restore-keys: |
            combined-results-

      - name: Restore consolidated httpx results
        id: cache-httpx
        uses: actions/cache@v4
        with:
          path: consolidated-httpx-results/
          key: consolidated-httpx-results-${{ inputs.run_id }}

      - name: Debug consolidated httpx results
        run: |
          echo "==== consolidated-httpx-results content ===="
          ls -l consolidated-httpx-results/ || echo "Directory not found"
          if [ -f "consolidated-httpx-results/all-httpx.txt" ]; then
            echo "File exists with $(wc -l < consolidated-httpx-results/all-httpx.txt) lines"
            head -10 consolidated-httpx-results/all-httpx.txt
          else
            echo "all-httpx.txt file not found"
          fi

      - name: Install x8
        run: |
          wget https://github.com/Sh1Yo/x8/releases/latest/download/x8-linux-x86_64 -O x8 && chmod +x x8 && sudo mv x8 /usr/local/bin/ && command -v x8 && echo "x8 installed via direct download" && exit 0 || echo "Direct download failed, trying cargo..."
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source "$HOME/.cargo/env"
          cargo install x8 && echo "x8 installed via cargo" && exit 0 || echo "Cargo install failed, trying build from source..."
          if command -v go >/dev/null 2>&1; then
            if ! command -v x8 >/dev/null 2>&1; then
              echo "Building from source failed. Creating a fallback script..."
            fi
          fi
          echo '#!/bin/bash' > /usr/local/bin/x8_fallback.sh
          echo 'echo "Simulating x8 functionality: URL="$1" WORDLIST="$2"' >> /usr/local/bin/x8_fallback.sh
          echo 'echo "Error: Fallback script executed. Real x8 not found. Please check installation."' >> /usr/local/bin/x8_fallback.sh
          chmod +x /usr/local/bin/x8_fallback.sh
          if ! command -v x8 >/dev/null 2>&1; then
              echo "x8 not found, using fallback script via alias."
              echo "alias x8='/usr/local/bin/x8_fallback.sh'" >> $GITHUB_ENV
              export PATH=$PATH:/usr/local/bin
          else
            echo "x8 found in PATH."
          fi

      - name: Run x8 on consolidated results
        run: |
          mkdir -p x8-results-${{ matrix.chunk }}
          
          if [ -f "consolidated-httpx-results/all-httpx.txt" ] && [ -s "consolidated-httpx-results/all-httpx.txt" ]; then
            echo "Using consolidated httpx results"
            TOTAL_LINES=$(wc -l < consolidated-httpx-results/all-httpx.txt)
            LINES_PER_CHUNK=$((TOTAL_LINES / 4 + 1))
            START_LINE=$((((${{ matrix.chunk }} - 1) * LINES_PER_CHUNK) + 1))
            END_LINE=$((${{ matrix.chunk }} * LINES_PER_CHUNK))
            
            sed -n "${START_LINE},${END_LINE}p" consolidated-httpx-results/all-httpx.txt > x8-chunk-${{ matrix.chunk }}.txt
            
            if [[ -s "x8-chunk-${{ matrix.chunk }}.txt" ]]; then
              echo "Processing chunk ${{ matrix.chunk }} with $(wc -l < x8-chunk-${{ matrix.chunk }}.txt) URLs"
              
              if [[ -s "combined-results/unfurl-params.txt" ]]; then
                if [[ -n "${{ inputs.headers }}" ]]; then
                  cat x8-chunk-${{ matrix.chunk }}.txt | xargs -P 4 -I{} x8 -u "{}" -w combined-results/unfurl-params.txt -X GET POST -H "${{ inputs.headers }}" > x8-results-${{ matrix.chunk }}/x8.txt || true
                else
                  cat x8-chunk-${{ matrix.chunk }}.txt | xargs -P 4 -I{} x8 -u "{}" -w combined-results/unfurl-params.txt -X GET POST > x8-results-${{ matrix.chunk }}/x8.txt || true
                fi
              else
                echo "unfurl-params.txt not found or empty, creating empty output"
                touch x8-results-${{ matrix.chunk }}/x8.txt
              fi
            else
              echo "No URLs for this chunk, creating empty output"
              touch x8-results-${{ matrix.chunk }}/x8.txt
            fi
          else
            echo "No consolidated httpx results found, creating empty output"
            touch x8-results-${{ matrix.chunk }}/x8.txt
          fi
          
          echo "x8 results count: $(wc -l < x8-results-${{ matrix.chunk }}/x8.txt)"

      - name: Debug x8 output
        run: |
          echo "x8-results-${{ matrix.chunk }}/ content:"
          ls -l x8-results-${{ matrix.chunk }}/ || true
          head -10 x8-results-${{ matrix.chunk }}/x8.txt || true

      - name: Cache x8 results
        uses: actions/cache@v4
        with:
          path: x8-results-${{ matrix.chunk }}/
          key: x8-results-${{ matrix.chunk }}-${{ inputs.run_id }}

  kxss-scan:
    needs: consolidate-httpx
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chunk: [1, 2, 3, 4, 5, 6]
    steps:
      - name: Restore combined results
        uses: actions/cache@v4
        with:
          path: combined-results/
          key: combined-results-${{ inputs.run_id }}
          restore-keys: |
            combined-results-

      - name: Restore consolidated httpx results
        id: cache-httpx-kxss
        uses: actions/cache@v4
        with:
          path: consolidated-httpx-results/
          key: consolidated-httpx-results-${{ inputs.run_id }}

      - name: Debug consolidated httpx results
        run: |
          echo "==== consolidated-httpx-results content ===="
          ls -l consolidated-httpx-results/ || echo "Directory not found"
          if [ -f "consolidated-httpx-results/all-httpx.txt" ]; then
            echo "File exists with $(wc -l < consolidated-httpx-results/all-httpx.txt) lines"
            head -10 consolidated-httpx-results/all-httpx.txt
          else
            echo "all-httpx.txt file not found"
          fi

      - name: Install kxss
        run: |
          go install github.com/Emoe/kxss@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Run kxss on consolidated results
        run: |
          mkdir -p kxss-results-${{ matrix.chunk }}
          export PATH=$PATH:$(go env GOPATH)/bin
          
          if [ -f "consolidated-httpx-results/all-httpx.txt" ] && [ -s "consolidated-httpx-results/all-httpx.txt" ]; then
            echo "Using consolidated httpx results"
            TOTAL_LINES=$(wc -l < consolidated-httpx-results/all-httpx.txt)
            LINES_PER_CHUNK=$((TOTAL_LINES / 6 + 1))
            START_LINE=$((((${{ matrix.chunk }} - 1) * LINES_PER_CHUNK) + 1))
            END_LINE=$((${{ matrix.chunk }} * LINES_PER_CHUNK))
            
            sed -n "${START_LINE},${END_LINE}p" consolidated-httpx-results/all-httpx.txt > kxss-urls-${{ matrix.chunk }}.txt
            
            if [[ -s "kxss-urls-${{ matrix.chunk }}.txt" ]]; then
              echo "Running kxss for chunk ${{ matrix.chunk }} with $(wc -l < kxss-urls-${{ matrix.chunk }}.txt) URLs"
              
              if [[ -f "combined-results/unfurl-params.txt" ]] && [[ -s "combined-results/unfurl-params.txt" ]]; then
                cat kxss-urls-${{ matrix.chunk }}.txt | httpx -silent -threads 30 -timeout 10 -retries 2 -status-code -follow-redirects -rate-limit 10 |
                while IFS= read -r url; do
                  while IFS= read -r param; do
                    echo "$url?${param}=KXSS"
                  done < combined-results/unfurl-params.txt
                done | sort -u > kxss-urls-final-${{ matrix.chunk }}.txt
                
                if [[ -s "kxss-urls-final-${{ matrix.chunk }}.txt" ]]; then
                  echo "Processing $(wc -l < kxss-urls-final-${{ matrix.chunk }}.txt) final URLs with kxss"
                  cat kxss-urls-final-${{ matrix.chunk }}.txt | kxss -timeout 300 -threads 50 > kxss-results-${{ matrix.chunk }}/kxss-output.txt || {
                    echo "kxss scan failed for chunk ${{ matrix.chunk }}"
                    touch kxss-results-${{ matrix.chunk }}/kxss-output.txt
                  }
                else
                  echo "No final URLs generated, creating empty output"
                  touch kxss-results-${{ matrix.chunk }}/kxss-output.txt
                fi
              else
                echo "unfurl-params.txt not found or empty, skipping parameter generation"
                touch kxss-results-${{ matrix.chunk }}/kxss-output.txt
              fi
            else
              echo "No URLs for this chunk, creating empty output"
              touch kxss-results-${{ matrix.chunk }}/kxss-output.txt
            fi
          else
            echo "No consolidated httpx results found, creating empty output"
            touch kxss-results-${{ matrix.chunk }}/kxss-output.txt
          fi
          
          echo "kxss found $(wc -l < kxss-results-${{ matrix.chunk }}/kxss-output.txt) results for chunk ${{ matrix.chunk }}"

      - name: Debug kxss output
        run: |
          echo "kxss-results-${{ matrix.chunk }}/ content:"
          ls -l kxss-results-${{ matrix.chunk }}/ || true
          head -10 kxss-results-${{ matrix.chunk }}/kxss-output.txt || true

      - name: Cache kxss results
        uses: actions/cache@v4
        with:
          path: kxss-results-${{ matrix.chunk }}/
          key: kxss-results-${{ matrix.chunk }}-${{ inputs.run_id }}
